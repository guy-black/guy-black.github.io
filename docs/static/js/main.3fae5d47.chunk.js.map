{"version":3,"sources":["projects/logo192.png","logo.svg","projects/projCard.js","projects/ProjArr.js","projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProjCard","props","Paper","Grid","container","item","direction","Typography","align","variant","classNam","title","Avatar","alt","src","picture","className","desc","Button","href","srcLink","liveLink","projArr","logo192","Projects","projGrid","map","p","i","md","sm","xs","key","id","spacing","justify","alignContent","App","logo","Container","component","disableGutters","maxWidth","fontSize","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fae5d47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.10557038.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25104e31.svg\";","import React from 'react';\r\nimport { Paper, Grid, Avatar, Typography, Button } from '@material-ui/core';\r\n\r\nfunction ProjCard(props) {\r\n    return(\r\n        <Paper>\r\n            <Grid container >\r\n                <Grid container item direction=\"column\">\r\n                    <Grid item>\r\n                        <Typography \r\n                            align=\"center\"\r\n                            variant=\"subtitle2\"\r\n                            classNam=\"title\" >\r\n                                {props.title}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Avatar\r\n                            alt={props.title}\r\n                            variant=\"rounded\"\r\n                            src={props.picture}\r\n                            className=\"projPic\" />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item direction=\"column\">\r\n                    <Grid item>\r\n                    <Typography \r\n                        variant=\"body1\" \r\n                        className=\"desc\"\r\n                        align=\"center\" >\r\n                            {props.desc}\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item container className=\"links\">\r\n                        <Grid item>\r\n                            <Button \r\n                                href={props.srcLink}\r\n                                variant=\"text\">\r\n                                    view source\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button \r\n                                href={props.liveLink}\r\n                                variant=\"text\">\r\n                                    view live\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default ProjCard;\r\n\r\n\r\n\r\n\r\n/* <Card className=\"projCard\" raised={true}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className=\"projPic\"\r\n                    image={props.picture}\r\n                    title={props.title} />\r\n                <CardContent>\r\n                    <Typography variant=\"h3\" className=\"title\">\r\n                        {props.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"desc\" >\r\n                        {props.desc}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions className=\"links\">\r\n                <Button href={props.srcLink}>\r\n                    Source\r\n                </Button>\r\n                <Button href={props.liveLink}>\r\n                    Live\r\n                </Button>\r\n            </CardActions>\r\n        </Card> */","import logo192 from './logo192.png'\r\n\r\nconst projArr = [\r\n    {\r\n        title: \"This portfolio page\",\r\n        picture: logo192,\r\n        desc: \"Simple page built using HTML, CSS, Javascript, React.js, and Material UI.  Meant to provide a quick glance at my projects.\",\r\n        srcLink: \"https://github.com/guy-black/guy-black.github.io\",\r\n        liveLink: \"httpls://guy-black.github.io\"\r\n    },{\r\n        title: \"idk some api thing\",\r\n        picture: logo192,\r\n        desc: \"built with html and css, with a little bit of javascript\",\r\n        srcLink: \"https://github.com/guy-black/guy-black.github.io\",\r\n        liveLink: \"httpls://guy-black.github.io\"\r\n    },{\r\n        title: \"calculator\",\r\n        picture: logo192,\r\n        desc: \"built with html and css, with a little bit of javascript\",\r\n        srcLink: \"https://github.com/guy-black/guy-black.github.io\",\r\n        liveLink: \"httpls://guy-black.github.io\"\r\n    },{\r\n        title: \"litebrite\",\r\n        picture: logo192,\r\n        desc: \"built with html and css, with a little bit of javascript\",\r\n        srcLink: \"https://github.com/guy-black/guy-black.github.io\",\r\n        liveLink: \"httpls://guy-black.github.io\"\r\n    }\r\n\r\n];\r\n\r\nexport default projArr;","import React from 'react';\r\nimport ProjCard from './projCard'\r\nimport './projects.css'\r\nimport projArr from './ProjArr'\r\nimport { Grid } from '@material-ui/core';\r\n\r\n\r\nfunction Projects(){\r\n  const projGrid = projArr.map((p, i)=>{ return(\r\n    <Grid item md sm={6} xs={12}>\r\n      <ProjCard\r\n        key={i} \r\n        title={p.title} \r\n        picture={p.picture} \r\n        desc={p.desc} \r\n        srcLink={p.srcLink} \r\n        liveLink={p.liveLink} />\r\n    </Grid>\r\n  );})\r\n    return(\r\n        <Grid\r\n        container \r\n        id=\"projCards\"\r\n        spacing={2}\r\n        justify=\"space-around\"\r\n        alignContent=\"space-around\">\r\n          {projGrid}\r\n        </Grid>\r\n      );\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css'\r\nimport { Container } from '@material-ui/core';\r\nimport Projects from './projects/Projects';\r\nimport DraftsRoundedIcon from '@material-ui/icons/DraftsRounded';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <>\r\n        <img src={logo} alt=\"logo\" id=\"logo\"/>\r\n      </>\r\n      <Projects />\r\n      <Container id=\"contact\" component='footer' disableGutters={true} maxWidth={false}>\r\n          <a href=\"mailto:guyb2602@gmail.com\"><DraftsRoundedIcon className=\"contacts\" fontSize= \"large\"/></a>\r\n          <a target=\"_blank\" rel='noopener noreferrer' href=\"https://github.com/guy-black\"><GitHubIcon className=\"contacts\" fontSize= \"large\"/></a>\r\n          <a target=\"_blank\" rel='noopener noreferrer' href=\"https://www.linkdin.com\"><LinkedInIcon className=\"contacts\" fontSize= \"large\"/></a>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}